## 第2章

### 演習問題.4


```java
public interface Function1<T, R> {
  public R apply(T t);
}
```  

#### a

あるメソッドm1は`Function1<String, Object>`を引数にとります。`Function1<Object, Object>`型のインスタンスf1をm1に渡したら何が起きるでしょうか。Javaのコンパイラがf1をm1に渡すことを許可するようにしたいならば、どのようにm1の宣言を変更したらよいでしょうか。また、少なくとも「型安全」という視点から、なぜその変更が正しいと言えるのしょうか。

----


引数の型が異なるため、m1にf1を引数として渡すことはコンパイルエラーとなる。そこで、m1を次のように変更する。

```diff
-   private void m1 (Function1<String, Object> f1) {
+   private void m1 (Function1<? super String, Object> f1) {
        f1.apply("hello");
    }
```

下限境界ワイルドカードを利用して`Function<Object, Object>`を引数として与えつつもFunction1#applyの引数はStringのままである。この修正で、f1のとりうる型引数の1つ目はStringあるいはそのsupertypeに限定される。とりうる型について明示的な制約が存在していることから、型安全であると言える。

#### b

同じメソッドm1について、今度は`Function1<String, String>`型のf2関数を渡すとします。コンパイラがf2をm2に渡すことを許可するようにしたいならば、どのようにm1の宣言を変更したらよいでしょうか。型安全の観点から、なぜその変更が正しいと言えるでしょうか。


----


m1を次のように修正します。

```diff
-   private void m1 (Function1<? super String, Object> f1) {
+   private void m1 (Function1<? super String, ? extends String> f1) {
        f1.apply("hello");
    }
```

上限境界ワイルドカードを利用することで、Function1#applyの返り値はStringのsubtypeであると制限された。この修正で、f2の型引数の2つめはStringやそのsubtypeに制約される。こちらも同様に、取りうる型について制約が存在していることから、型安全であると言える。
